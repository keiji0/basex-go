package basex

import (
	"bytes"
	"testing"
)

func TestNewEncode(t *testing.T) {
	if _, err := NewEncoder(""); err == nil {
		t.Error("0進数のエラーチェックができていない")
	}
	if _, err := NewEncoder("0"); err == nil {
		t.Error("1進数のエラーチェックができていない")
	}
	if _, err := NewEncoder("01"); err != nil {
		t.Error("2進数は生成できないとおかしい")
	}
}

type testDataType struct {
	data []byte
	res  string
}

var testData = []testDataType{
	{[]byte{0xf0, 0x3b, 0x63, 0x2c, 0xc8, 0x8b, 0x77, 0x77, 0x5a}, "44Ma6WnvqBvsb"},
	{[]byte{0x5, 0xce, 0x67, 0xc4, 0x9e, 0x36, 0xc5, 0x21, 0xd4, 0x6e, 0x38, 0x50, 0x47, 0x2d, 0x5b, 0xde, 0xe0, 0xa8, 0xca, 0xd4, 0x57, 0xa1, 0x5a, 0x74, 0x4, 0xc1}, "BK6i1JNzdfPYpsPi7TPiz2Rbry7fEgk7tBJ"},
	{[]byte{0xdd, 0xf3, 0x67, 0x97, 0x14, 0xe4, 0xea, 0x7b, 0x47, 0xb7, 0xb3, 0x1, 0x70, 0x15, 0x6f, 0x2f, 0x55, 0x77, 0xf4, 0x6c, 0xdb, 0x2a, 0x52, 0xfc, 0xa6, 0xf8, 0x12, 0x62, 0x68, 0x45, 0x23, 0x8, 0x2, 0xf, 0xcf, 0xf5, 0x60, 0x7, 0x3c, 0xcd, 0xab, 0x47, 0x87, 0xa7, 0xf, 0x4, 0xa0, 0x94, 0x75, 0xf4, 0xd1, 0x8f, 0x17}, "549mwdVuH9CJwEuSsRGM5LKdxq2KLN5o5yyQbcKr3Yu1znTmhquhL4vWaYuRy8ZKCK1RVuuq8"},
	{[]byte{0xfb, 0xdc, 0x79, 0xd4, 0xcf, 0x79, 0x1e, 0x80, 0x7f, 0x96, 0xa3, 0x35, 0x76, 0xb6, 0xec, 0xc9, 0x8d, 0x3f, 0xe8, 0xc0, 0x6, 0x67, 0x7c, 0xf7, 0x7b, 0xe, 0x74, 0x7e}, "3bFJXy4rg7jFHGFAhW4HN3iYJZauNXcJY1moNZT"},
	{[]byte{0x70, 0x51, 0xdc, 0x9c, 0x71, 0xe, 0x6, 0xbb, 0x7a, 0xf, 0x98, 0xf7, 0x7b, 0xb1, 0x29, 0x9c, 0x92, 0x19, 0xf6, 0x9a, 0xcb, 0xe}, "XV7wj4H4jHYMp5CqWniYXnc5tuLjVw"},
	{[]byte{0x48, 0xde, 0xb0, 0x56, 0x5e}, "9DqRFAV"},
	{[]byte{0x29, 0x5b, 0x8c, 0x23, 0x57, 0xd3, 0xf3, 0x63, 0xb5, 0x59, 0xe6, 0xa, 0x6b, 0xb3, 0x52, 0x54, 0xec, 0x26, 0xf6, 0x54}, "aRGpkbGUqogPM3CtWBoCEJXL34f"},
	{[]byte{0xdb, 0xf5, 0xa7, 0x68, 0xc2, 0x14, 0x66, 0xd5, 0xa7, 0xda, 0xcb, 0x5c, 0xa4, 0xe8, 0xbe, 0x42, 0xee, 0x5f, 0xc4, 0x47}, "44jfXXWNBApYxsQQmovKMDbhfYdL"},
	{[]byte{0x32, 0x61, 0x31, 0xb8, 0x73, 0x86, 0xf7, 0xe2, 0xdd, 0x3b, 0xd0, 0x40, 0x86}, "5CP7EQWADx8nEzewHP"},
	{[]byte{0xee, 0xf5, 0xe, 0x36, 0x76, 0x19, 0x82, 0xd6, 0x80, 0x67, 0x2f, 0x7e}, "5WYPDRfH7Mj51DwEM"},
}

func TestEncode(t *testing.T) {
	// テストコードを生成する
	// import (
	// 	b58 "github.com/btcsuite/btcutil/base58"
	// )
	// rand.Seed(10)
	// buf := &bytes.Buffer{}
	// for i := 0; i < 10; i++ {
	// 	n := rand.Intn(50) + 5
	// 	for ii := 0; ii < n; ii++ {
	// 		buf.WriteByte(byte(rand.Intn(256)))
	// 	}
	// 	fmt.Printf("{ %#v, %q, },\n", buf.Bytes(), b58.Encode(buf.Bytes()))
	// 	buf.Reset()
	// }

	encoder, _ := NewEncoder("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")
	for _, v := range testData {
		res := encoder.Encode(v.data)
		if res != v.res {
			t.Errorf("エンコード結果が一致しませんでした: %v = %v", res, v.res)
		}
	}
}

func TestDecode(t *testing.T) {
	encoder, _ := NewEncoder("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz")

	// エラーチェック
	{
		if _, err := encoder.Decode("0"); err == nil {
			t.Error("不正な文字を入力したにもかかわらずエラーハンドリングできていない")
		}
		if _, err := encoder.Decode("123450"); err == nil {
			t.Error("不正な文字を入力したにもかかわらずエラーハンドリングできていない")
		}
		if _, err := encoder.Decode("1"); err != nil {
			t.Error("まちがった不正判定")
		}
	}

	for _, v := range testData {
		res, _ := encoder.Decode(v.res)
		if !bytes.Equal(res, v.data) {
			t.Errorf("エンコード結果が一致しませんでした: %v = %v", res, v.data)
		}
	}
}
